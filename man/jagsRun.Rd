% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jagsRun.R
\name{jagsRun}
\alias{jagsRun}
\title{Run JAGS}
\usage{
jagsRun(jagsData, jagsModel, jagsInits, params, jagsID, jagsDsc, db_hash,
  n_chain = 3, n_adapt = 5000, n_burn, n_draw, n_thin = 1,
  DEBUG = FALSE, EXTRA = FALSE, RANDOM = FALSE, Rhat_max = 1.05,
  n_rburn = 0, n_max, params_extra = params, params_report = params,
  ppc = NULL, obj_out = FALSE, save_data = FALSE, report = TRUE)
}
\arguments{
\item{jagsData}{List containing data to feed to JAGS}

\item{jagsModel}{JAGS model file}

\item{jagsInits}{Initial values for JAGS model. Should be a list of lists (number of embedded lists should equal the number of chains being run in the model). NOTE: each chain should specify a different starting value for a particular parameter and/or use a different seed/RNG to avoid identical chains.}

\item{params}{Character string or vector of character strings specifying which parameters to track}

\item{jagsID}{OPTIONAL. Character string with name of jags run (e.g., 'Run_1')}

\item{jagsDsc}{OPTIONAL. Character string with description of the jags run (e.g., 'First model run')}

\item{db_hash}{OPTIONAL. Character string with description of data version which will be printed in the output file. Could be latest git commit hash.}

\item{n_chain}{Numeric specifying number of chains to be run}

\item{n_adapt}{Numeric specifying how many iterations to use for adaptation}

\item{n_burn}{Numeric specifying how any iterations to use for burn-in}

\item{n_draw}{Numeric specifying how many iterations to use for draw (iterations to be kept beyond adaptation and burn-in)}

\item{n_thin}{Numeric specifying thinning rate}

\item{DEBUG}{Logical used to specify whether DEBUG mode should be used. If \code{TRUE}, \code{jags.model} is called which begins adaptation with adapt = 2. This ensures that the likelihood can be calclated and the model run (priors and inits are appropriate).}

\item{EXTRA}{Logical used to specify whether extra iterations should be run if convergence is not met. If \code{TRUE}, up to \code{n_max} iterations are run until convergence is reached (specified by \code{Rhat_max})}

\item{RANDOM}{Logical specifying whether to use script to generate random inits. If \code{TRUE}, \code{jagsInits} should be a function that generates random initial values.}

\item{Rhat_max}{Numeric specifying the maximum Rhat value allowed when \code{EXTRA = TRUE}}

\item{n_rburn}{Numeric specifying how many samples to use for burn in if \code{EXTRA = TRUE} and convergence (defined by \code{Rhat_max}) has not been reached.}

\item{n_max}{Numeric specifying the maximum number of samples to be drawn when \code{EXTRA = TRUE}}

\item{params_extra}{Character string or vector of character strings specifying which parameters to evaluate convergence for when \code{EXTRA = TRUE}. Must be a subset of \code{params}.}

\item{params_report}{Character string or vector of character strings specifying which parameters to report. Must be a subset of \code{params}.}

\item{ppc}{Character string or vector of character strings specifying the name of elements used for the posteriod predictive check (PPC). If specified, the summary information for these elements will be output in the report.}

\item{obj_out}{Logical specifying whether MCMC.list object should be output}

\item{save_data}{Logical specifying whether input data to function should be saved as a .rds object}

\item{report}{Logical specifying whether to generate directory with report and .rds object - if FALSE, MCMC.list object is output}
}
\description{
Run JAGS in parallel and output output of interest. Number of cores used equals number of chains specified. Be sure that your machine has an adequate number of (virtual) cores available to run the model. Function creates a directory with \code{jagsID} name, saves .rds file with model output, and produces output summary in text file format.
}
\section{Notes}{
 jagsData should be formatted as such: XXXXX. jagsInits should be formatted as such: XXXXX. Jags params should be formatted as such: XXXXX.
}

